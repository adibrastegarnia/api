// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/primitive/primitive.proto

package primitive

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PrimitiveType is a primitive type
type PrimitiveType int32

const (
	PrimitiveType_UNKNOWN      PrimitiveType = 0
	PrimitiveType_COUNTER      PrimitiveType = 1
	PrimitiveType_ELECTION     PrimitiveType = 2
	PrimitiveType_INDEXED_MAP  PrimitiveType = 3
	PrimitiveType_LEADER_LATCH PrimitiveType = 4
	PrimitiveType_LIST         PrimitiveType = 5
	PrimitiveType_LOCK         PrimitiveType = 6
	PrimitiveType_LOG          PrimitiveType = 7
	PrimitiveType_MAP          PrimitiveType = 8
	PrimitiveType_SET          PrimitiveType = 9
	PrimitiveType_VALUE        PrimitiveType = 10
)

var PrimitiveType_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "COUNTER",
	2:  "ELECTION",
	3:  "INDEXED_MAP",
	4:  "LEADER_LATCH",
	5:  "LIST",
	6:  "LOCK",
	7:  "LOG",
	8:  "MAP",
	9:  "SET",
	10: "VALUE",
}

var PrimitiveType_value = map[string]int32{
	"UNKNOWN":      0,
	"COUNTER":      1,
	"ELECTION":     2,
	"INDEXED_MAP":  3,
	"LEADER_LATCH": 4,
	"LIST":         5,
	"LOCK":         6,
	"LOG":          7,
	"MAP":          8,
	"SET":          9,
	"VALUE":        10,
}

func (x PrimitiveType) String() string {
	return proto.EnumName(PrimitiveType_name, int32(x))
}

func (PrimitiveType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_056a91a3aedc7ac7, []int{0}
}

// Namespaced primitive name
type Name struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *Name) Reset()         { *m = Name{} }
func (m *Name) String() string { return proto.CompactTextString(m) }
func (*Name) ProtoMessage()    {}
func (*Name) Descriptor() ([]byte, []int) {
	return fileDescriptor_056a91a3aedc7ac7, []int{0}
}
func (m *Name) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Name) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Name.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Name) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Name.Merge(m, src)
}
func (m *Name) XXX_Size() int {
	return m.Size()
}
func (m *Name) XXX_DiscardUnknown() {
	xxx_messageInfo_Name.DiscardUnknown(m)
}

var xxx_messageInfo_Name proto.InternalMessageInfo

func (m *Name) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Name) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func init() {
	proto.RegisterEnum("atomix.primitive.PrimitiveType", PrimitiveType_name, PrimitiveType_value)
	proto.RegisterType((*Name)(nil), "atomix.primitive.Name")
}

func init() { proto.RegisterFile("atomix/primitive/primitive.proto", fileDescriptor_056a91a3aedc7ac7) }

var fileDescriptor_056a91a3aedc7ac7 = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0xd0, 0xbf, 0x4f, 0x83, 0x40,
	0x14, 0x07, 0x70, 0xae, 0xa5, 0x2d, 0xbc, 0xd6, 0xf8, 0xf2, 0x26, 0x06, 0x73, 0x69, 0x9c, 0x8c,
	0x43, 0x1d, 0x5c, 0x5c, 0x11, 0x2e, 0x4a, 0x7a, 0x1e, 0x0d, 0x3d, 0xd4, 0xad, 0x41, 0xc3, 0xc0,
	0x80, 0x90, 0x4a, 0x8c, 0xfe, 0x17, 0x0e, 0xfe, 0x51, 0x8e, 0x1d, 0x1d, 0x0d, 0xfc, 0x23, 0xe6,
	0x30, 0xda, 0xe9, 0x3e, 0xf7, 0x7d, 0x3f, 0x86, 0x07, 0xf3, 0xac, 0xa9, 0xca, 0xe2, 0xf5, 0xac,
	0xde, 0x16, 0x65, 0xd1, 0x14, 0x2f, 0xf9, 0x5e, 0x8b, 0x7a, 0x5b, 0x35, 0x15, 0xe1, 0x6f, 0xc7,
	0xe2, 0x3f, 0x3f, 0xbe, 0x00, 0x5b, 0x65, 0x65, 0x4e, 0x04, 0xf6, 0x53, 0x56, 0xe6, 0x1e, 0x9b,
	0xb3, 0x13, 0x37, 0xe9, 0x4d, 0x47, 0xe0, 0x9a, 0xf7, 0xb9, 0xce, 0x1e, 0x73, 0x6f, 0xd0, 0x17,
	0xf6, 0xc1, 0xe9, 0x07, 0x83, 0x83, 0xd5, 0xdf, 0x1e, 0xfd, 0x56, 0xe7, 0x34, 0x85, 0x49, 0xaa,
	0x96, 0x2a, 0xbe, 0x53, 0x68, 0x99, 0x4f, 0x10, 0xa7, 0x4a, 0x8b, 0x04, 0x19, 0xcd, 0xc0, 0x11,
	0x52, 0x04, 0x3a, 0x8a, 0x15, 0x0e, 0xe8, 0x10, 0xa6, 0x91, 0x0a, 0xc5, 0xbd, 0x08, 0x37, 0x37,
	0xfe, 0x0a, 0x87, 0x84, 0x30, 0x93, 0xc2, 0x0f, 0x45, 0xb2, 0x91, 0xbe, 0x0e, 0xae, 0xd1, 0x26,
	0x07, 0x6c, 0x19, 0xad, 0x35, 0x8e, 0x7a, 0xc5, 0xc1, 0x12, 0xc7, 0x34, 0x81, 0xa1, 0x8c, 0xaf,
	0x70, 0x62, 0x60, 0xe6, 0x1c, 0x83, 0xb5, 0xd0, 0xe8, 0x92, 0x0b, 0xa3, 0x5b, 0x5f, 0xa6, 0x02,
	0xe1, 0xd2, 0xfb, 0x6c, 0x39, 0xdb, 0xb5, 0x9c, 0x7d, 0xb7, 0x9c, 0xbd, 0x77, 0xdc, 0xda, 0x75,
	0xdc, 0xfa, 0xea, 0xb8, 0xf5, 0x30, 0xee, 0x6f, 0x70, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0xde,
	0xe8, 0xed, 0x86, 0x27, 0x01, 0x00, 0x00,
}

func (m *Name) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Name) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Name) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintPrimitive(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPrimitive(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPrimitive(dAtA []byte, offset int, v uint64) int {
	offset -= sovPrimitive(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Name) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPrimitive(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovPrimitive(uint64(l))
	}
	return n
}

func sovPrimitive(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPrimitive(x uint64) (n int) {
	return sovPrimitive(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Name) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrimitive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Name: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Name: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrimitive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrimitive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrimitive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrimitive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrimitive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrimitive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrimitive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrimitive
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrimitive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrimitive(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrimitive
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrimitive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrimitive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPrimitive
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPrimitive
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPrimitive
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPrimitive        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrimitive          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPrimitive = fmt.Errorf("proto: unexpected end of group")
)
