// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/protocols/log/log.proto

package log

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Storage level
type StorageLevel int32

const (
	StorageLevel_DISK   StorageLevel = 0
	StorageLevel_MAPPED StorageLevel = 1
)

var StorageLevel_name = map[int32]string{
	0: "DISK",
	1: "MAPPED",
}

var StorageLevel_value = map[string]int32{
	"DISK":   0,
	"MAPPED": 1,
}

func (x StorageLevel) String() string {
	return proto.EnumName(StorageLevel_name, int32(x))
}

func (StorageLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5f34b1fccdd52315, []int{0}
}

// Member group strategy
type MemberGroupStrategy int32

const (
	MemberGroupStrategy_HOST_AWARE MemberGroupStrategy = 0
	MemberGroupStrategy_RACK_AWARE MemberGroupStrategy = 1
	MemberGroupStrategy_ZONE_AWARE MemberGroupStrategy = 2
)

var MemberGroupStrategy_name = map[int32]string{
	0: "HOST_AWARE",
	1: "RACK_AWARE",
	2: "ZONE_AWARE",
}

var MemberGroupStrategy_value = map[string]int32{
	"HOST_AWARE": 0,
	"RACK_AWARE": 1,
	"ZONE_AWARE": 2,
}

func (x MemberGroupStrategy) String() string {
	return proto.EnumName(MemberGroupStrategy_name, int32(x))
}

func (MemberGroupStrategy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5f34b1fccdd52315, []int{1}
}

// Log protocol configuration
type LogProtocol struct {
	MemberGroupStrategy MemberGroupStrategy `protobuf:"varint,1,opt,name=member_group_strategy,json=memberGroupStrategy,proto3,enum=atomix.protocols.log.MemberGroupStrategy" json:"member_group_strategy,omitempty"`
	Storage             *StorageSpec        `protobuf:"bytes,2,opt,name=storage,proto3" json:"storage,omitempty"`
	Compaction          *CompactionSpec     `protobuf:"bytes,3,opt,name=compaction,proto3" json:"compaction,omitempty"`
}

func (m *LogProtocol) Reset()         { *m = LogProtocol{} }
func (m *LogProtocol) String() string { return proto.CompactTextString(m) }
func (*LogProtocol) ProtoMessage()    {}
func (*LogProtocol) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f34b1fccdd52315, []int{0}
}
func (m *LogProtocol) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogProtocol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogProtocol.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogProtocol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogProtocol.Merge(m, src)
}
func (m *LogProtocol) XXX_Size() int {
	return m.Size()
}
func (m *LogProtocol) XXX_DiscardUnknown() {
	xxx_messageInfo_LogProtocol.DiscardUnknown(m)
}

var xxx_messageInfo_LogProtocol proto.InternalMessageInfo

func (m *LogProtocol) GetMemberGroupStrategy() MemberGroupStrategy {
	if m != nil {
		return m.MemberGroupStrategy
	}
	return MemberGroupStrategy_HOST_AWARE
}

func (m *LogProtocol) GetStorage() *StorageSpec {
	if m != nil {
		return m.Storage
	}
	return nil
}

func (m *LogProtocol) GetCompaction() *CompactionSpec {
	if m != nil {
		return m.Compaction
	}
	return nil
}

// Partition group storage configuration
type StorageSpec struct {
	MaxEntrySize  uint32       `protobuf:"varint,1,opt,name=max_entry_size,json=maxEntrySize,proto3" json:"max_entry_size,omitempty"`
	SegmentSize   uint32       `protobuf:"varint,2,opt,name=segment_size,json=segmentSize,proto3" json:"segment_size,omitempty"`
	Level         StorageLevel `protobuf:"varint,3,opt,name=level,proto3,enum=atomix.protocols.log.StorageLevel" json:"level,omitempty"`
	FlushOnCommit bool         `protobuf:"varint,4,opt,name=flush_on_commit,json=flushOnCommit,proto3" json:"flush_on_commit,omitempty"`
}

func (m *StorageSpec) Reset()         { *m = StorageSpec{} }
func (m *StorageSpec) String() string { return proto.CompactTextString(m) }
func (*StorageSpec) ProtoMessage()    {}
func (*StorageSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f34b1fccdd52315, []int{1}
}
func (m *StorageSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StorageSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StorageSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageSpec.Merge(m, src)
}
func (m *StorageSpec) XXX_Size() int {
	return m.Size()
}
func (m *StorageSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageSpec.DiscardUnknown(m)
}

var xxx_messageInfo_StorageSpec proto.InternalMessageInfo

func (m *StorageSpec) GetMaxEntrySize() uint32 {
	if m != nil {
		return m.MaxEntrySize
	}
	return 0
}

func (m *StorageSpec) GetSegmentSize() uint32 {
	if m != nil {
		return m.SegmentSize
	}
	return 0
}

func (m *StorageSpec) GetLevel() StorageLevel {
	if m != nil {
		return m.Level
	}
	return StorageLevel_DISK
}

func (m *StorageSpec) GetFlushOnCommit() bool {
	if m != nil {
		return m.FlushOnCommit
	}
	return false
}

// Partition group compaction configuration
type CompactionSpec struct {
	Dynamic        bool    `protobuf:"varint,1,opt,name=dynamic,proto3" json:"dynamic,omitempty"`
	FreeDiskBuffer float64 `protobuf:"fixed64,2,opt,name=free_disk_buffer,json=freeDiskBuffer,proto3" json:"free_disk_buffer,omitempty"`
}

func (m *CompactionSpec) Reset()         { *m = CompactionSpec{} }
func (m *CompactionSpec) String() string { return proto.CompactTextString(m) }
func (*CompactionSpec) ProtoMessage()    {}
func (*CompactionSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f34b1fccdd52315, []int{2}
}
func (m *CompactionSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompactionSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompactionSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompactionSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompactionSpec.Merge(m, src)
}
func (m *CompactionSpec) XXX_Size() int {
	return m.Size()
}
func (m *CompactionSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_CompactionSpec.DiscardUnknown(m)
}

var xxx_messageInfo_CompactionSpec proto.InternalMessageInfo

func (m *CompactionSpec) GetDynamic() bool {
	if m != nil {
		return m.Dynamic
	}
	return false
}

func (m *CompactionSpec) GetFreeDiskBuffer() float64 {
	if m != nil {
		return m.FreeDiskBuffer
	}
	return 0
}

func init() {
	proto.RegisterEnum("atomix.protocols.log.StorageLevel", StorageLevel_name, StorageLevel_value)
	proto.RegisterEnum("atomix.protocols.log.MemberGroupStrategy", MemberGroupStrategy_name, MemberGroupStrategy_value)
	proto.RegisterType((*LogProtocol)(nil), "atomix.protocols.log.LogProtocol")
	proto.RegisterType((*StorageSpec)(nil), "atomix.protocols.log.StorageSpec")
	proto.RegisterType((*CompactionSpec)(nil), "atomix.protocols.log.CompactionSpec")
}

func init() { proto.RegisterFile("atomix/protocols/log/log.proto", fileDescriptor_5f34b1fccdd52315) }

var fileDescriptor_5f34b1fccdd52315 = []byte{
	// 442 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x41, 0x6a, 0xdb, 0x40,
	0x14, 0x86, 0x35, 0x6e, 0x9a, 0x98, 0x67, 0x47, 0x35, 0x93, 0x16, 0xb4, 0x12, 0x8e, 0x31, 0xc5,
	0xcd, 0x42, 0x01, 0x77, 0x53, 0xe8, 0xca, 0xb1, 0x45, 0x5b, 0x92, 0xd4, 0x66, 0x14, 0x28, 0x14,
	0xca, 0x20, 0x2b, 0x63, 0x75, 0x88, 0x46, 0x63, 0x66, 0xc6, 0xc5, 0xce, 0x29, 0x7a, 0x9c, 0x1e,
	0xa1, 0xcb, 0x2c, 0xbb, 0x2c, 0xf6, 0x01, 0x7a, 0x85, 0xa2, 0xb1, 0x12, 0x5c, 0x2a, 0xb2, 0xd0,
	0xe2, 0xff, 0xde, 0xff, 0x3f, 0xfe, 0xa7, 0x01, 0x3f, 0x36, 0x52, 0xf0, 0xe5, 0xe9, 0x5c, 0x49,
	0x23, 0x13, 0x99, 0xe9, 0xd3, 0x4c, 0xa6, 0xc5, 0x17, 0x58, 0x82, 0x9f, 0x6f, 0xe7, 0xc1, 0xc3,
	0x3c, 0xc8, 0x64, 0xda, 0xf9, 0x83, 0xa0, 0x71, 0x21, 0xd3, 0x49, 0x09, 0xf1, 0x17, 0x78, 0x21,
	0x98, 0x98, 0x32, 0x45, 0x53, 0x25, 0x17, 0x73, 0xaa, 0x8d, 0x8a, 0x0d, 0x4b, 0x57, 0x1e, 0x6a,
	0xa3, 0x9e, 0xdb, 0x7f, 0x15, 0x54, 0x6d, 0x09, 0x2e, 0x6d, 0xe4, 0x5d, 0x91, 0x88, 0xca, 0x00,
	0x39, 0x12, 0xff, 0x43, 0xfc, 0x16, 0x0e, 0xb4, 0x91, 0x2a, 0x4e, 0x99, 0x57, 0x6b, 0xa3, 0x5e,
	0xa3, 0x7f, 0x5c, 0xbd, 0x30, 0xda, 0x9a, 0xa2, 0x39, 0x4b, 0xc8, 0x7d, 0x02, 0x8f, 0x00, 0x12,
	0x29, 0xe6, 0x71, 0x62, 0xb8, 0xcc, 0xbd, 0x27, 0x36, 0xdf, 0xad, 0xce, 0x0f, 0x1f, 0x7c, 0x76,
	0xc5, 0x4e, 0xae, 0xf3, 0x03, 0x41, 0x63, 0x67, 0x3d, 0xee, 0x82, 0x2b, 0xe2, 0x25, 0x65, 0xb9,
	0x51, 0x2b, 0xaa, 0xf9, 0x2d, 0xb3, 0xa7, 0x1e, 0x92, 0xa6, 0x88, 0x97, 0x61, 0x01, 0x23, 0x7e,
	0xcb, 0xf0, 0x31, 0x34, 0x35, 0x4b, 0x05, 0xcb, 0xcd, 0xd6, 0x53, 0xb3, 0x9e, 0x46, 0xc9, 0xac,
	0xe5, 0x0d, 0x3c, 0xcd, 0xd8, 0x37, 0x96, 0xd9, 0x66, 0x6e, 0xbf, 0xf3, 0xe8, 0x65, 0x17, 0x85,
	0x93, 0x6c, 0x03, 0xf8, 0x25, 0x3c, 0x9b, 0x65, 0x0b, 0xfd, 0x95, 0xca, 0x9c, 0x26, 0x52, 0x08,
	0x6e, 0xbc, 0xbd, 0x36, 0xea, 0xd5, 0xc9, 0xa1, 0xc5, 0xe3, 0x7c, 0x68, 0x61, 0xe7, 0x0a, 0xdc,
	0x7f, 0x0f, 0xc3, 0x1e, 0x1c, 0x5c, 0xaf, 0xf2, 0x58, 0xf0, 0xc4, 0xb6, 0xae, 0x93, 0x7b, 0x89,
	0x7b, 0xd0, 0x9a, 0x29, 0xc6, 0xe8, 0x35, 0xd7, 0x37, 0x74, 0xba, 0x98, 0xcd, 0x98, 0xb2, 0xa5,
	0x11, 0x71, 0x0b, 0x3e, 0xe2, 0xfa, 0xe6, 0xcc, 0xd2, 0x93, 0x2e, 0x34, 0x77, 0x4b, 0xe1, 0x3a,
	0xec, 0x8d, 0x3e, 0x44, 0xe7, 0x2d, 0x07, 0x03, 0xec, 0x5f, 0x0e, 0x26, 0x93, 0x70, 0xd4, 0x42,
	0x27, 0x21, 0x1c, 0x55, 0xbc, 0x32, 0x76, 0x01, 0xde, 0x8f, 0xa3, 0x2b, 0x3a, 0xf8, 0x34, 0x20,
	0x61, 0xcb, 0x29, 0x34, 0x19, 0x0c, 0xcf, 0x4b, 0x8d, 0x0a, 0xfd, 0x79, 0xfc, 0x31, 0x2c, 0x75,
	0xed, 0xcc, 0xfb, 0xb9, 0xf6, 0xd1, 0xdd, 0xda, 0x47, 0xbf, 0xd7, 0x3e, 0xfa, 0xbe, 0xf1, 0x9d,
	0xbb, 0x8d, 0xef, 0xfc, 0xda, 0xf8, 0xce, 0x74, 0xdf, 0xfe, 0xa7, 0xd7, 0x7f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0xb6, 0x94, 0x4f, 0x6a, 0xc8, 0x02, 0x00, 0x00,
}

func (m *LogProtocol) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogProtocol) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogProtocol) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Compaction != nil {
		{
			size, err := m.Compaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Storage != nil {
		{
			size, err := m.Storage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MemberGroupStrategy != 0 {
		i = encodeVarintLog(dAtA, i, uint64(m.MemberGroupStrategy))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StorageSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FlushOnCommit {
		i--
		if m.FlushOnCommit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Level != 0 {
		i = encodeVarintLog(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x18
	}
	if m.SegmentSize != 0 {
		i = encodeVarintLog(dAtA, i, uint64(m.SegmentSize))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxEntrySize != 0 {
		i = encodeVarintLog(dAtA, i, uint64(m.MaxEntrySize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CompactionSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompactionSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompactionSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FreeDiskBuffer != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FreeDiskBuffer))))
		i--
		dAtA[i] = 0x11
	}
	if m.Dynamic {
		i--
		if m.Dynamic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLog(dAtA []byte, offset int, v uint64) int {
	offset -= sovLog(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LogProtocol) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MemberGroupStrategy != 0 {
		n += 1 + sovLog(uint64(m.MemberGroupStrategy))
	}
	if m.Storage != nil {
		l = m.Storage.Size()
		n += 1 + l + sovLog(uint64(l))
	}
	if m.Compaction != nil {
		l = m.Compaction.Size()
		n += 1 + l + sovLog(uint64(l))
	}
	return n
}

func (m *StorageSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxEntrySize != 0 {
		n += 1 + sovLog(uint64(m.MaxEntrySize))
	}
	if m.SegmentSize != 0 {
		n += 1 + sovLog(uint64(m.SegmentSize))
	}
	if m.Level != 0 {
		n += 1 + sovLog(uint64(m.Level))
	}
	if m.FlushOnCommit {
		n += 2
	}
	return n
}

func (m *CompactionSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dynamic {
		n += 2
	}
	if m.FreeDiskBuffer != 0 {
		n += 9
	}
	return n
}

func sovLog(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLog(x uint64) (n int) {
	return sovLog(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LogProtocol) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogProtocol: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogProtocol: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberGroupStrategy", wireType)
			}
			m.MemberGroupStrategy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberGroupStrategy |= MemberGroupStrategy(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Storage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Storage == nil {
				m.Storage = &StorageSpec{}
			}
			if err := m.Storage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Compaction == nil {
				m.Compaction = &CompactionSpec{}
			}
			if err := m.Compaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLog
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StorageSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEntrySize", wireType)
			}
			m.MaxEntrySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxEntrySize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentSize", wireType)
			}
			m.SegmentSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SegmentSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= StorageLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlushOnCommit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlushOnCommit = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLog
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompactionSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompactionSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompactionSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dynamic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dynamic = bool(v != 0)
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeDiskBuffer", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FreeDiskBuffer = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLog
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLog(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLog
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLog
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLog
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLog
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLog        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLog          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLog = fmt.Errorf("proto: unexpected end of group")
)
