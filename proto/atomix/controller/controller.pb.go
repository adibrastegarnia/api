// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atomix/controller/controller.proto

package controller

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Gets a list of partition groups in the given namespace
type GetPartitionGroupsRequest struct {
	ID *PartitionGroupId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetPartitionGroupsRequest) Reset()         { *m = GetPartitionGroupsRequest{} }
func (m *GetPartitionGroupsRequest) String() string { return proto.CompactTextString(m) }
func (*GetPartitionGroupsRequest) ProtoMessage()    {}
func (*GetPartitionGroupsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6541e67aaed2c172, []int{0}
}
func (m *GetPartitionGroupsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPartitionGroupsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPartitionGroupsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPartitionGroupsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPartitionGroupsRequest.Merge(m, src)
}
func (m *GetPartitionGroupsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPartitionGroupsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPartitionGroupsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPartitionGroupsRequest proto.InternalMessageInfo

func (m *GetPartitionGroupsRequest) GetID() *PartitionGroupId {
	if m != nil {
		return m.ID
	}
	return nil
}

// Returns a list of partition groups
type GetPartitionGroupsResponse struct {
	Groups []*PartitionGroup `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (m *GetPartitionGroupsResponse) Reset()         { *m = GetPartitionGroupsResponse{} }
func (m *GetPartitionGroupsResponse) String() string { return proto.CompactTextString(m) }
func (*GetPartitionGroupsResponse) ProtoMessage()    {}
func (*GetPartitionGroupsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6541e67aaed2c172, []int{1}
}
func (m *GetPartitionGroupsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPartitionGroupsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPartitionGroupsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPartitionGroupsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPartitionGroupsResponse.Merge(m, src)
}
func (m *GetPartitionGroupsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetPartitionGroupsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPartitionGroupsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPartitionGroupsResponse proto.InternalMessageInfo

func (m *GetPartitionGroupsResponse) GetGroups() []*PartitionGroup {
	if m != nil {
		return m.Groups
	}
	return nil
}

// Creates a new partition group
type CreatePartitionGroupRequest struct {
	ID   *PartitionGroupId   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Spec *PartitionGroupSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (m *CreatePartitionGroupRequest) Reset()         { *m = CreatePartitionGroupRequest{} }
func (m *CreatePartitionGroupRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePartitionGroupRequest) ProtoMessage()    {}
func (*CreatePartitionGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6541e67aaed2c172, []int{2}
}
func (m *CreatePartitionGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePartitionGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePartitionGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePartitionGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePartitionGroupRequest.Merge(m, src)
}
func (m *CreatePartitionGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreatePartitionGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePartitionGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePartitionGroupRequest proto.InternalMessageInfo

func (m *CreatePartitionGroupRequest) GetID() *PartitionGroupId {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *CreatePartitionGroupRequest) GetSpec() *PartitionGroupSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

// Returns the status of a partition group
type CreatePartitionGroupResponse struct {
}

func (m *CreatePartitionGroupResponse) Reset()         { *m = CreatePartitionGroupResponse{} }
func (m *CreatePartitionGroupResponse) String() string { return proto.CompactTextString(m) }
func (*CreatePartitionGroupResponse) ProtoMessage()    {}
func (*CreatePartitionGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6541e67aaed2c172, []int{3}
}
func (m *CreatePartitionGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePartitionGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePartitionGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePartitionGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePartitionGroupResponse.Merge(m, src)
}
func (m *CreatePartitionGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreatePartitionGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePartitionGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePartitionGroupResponse proto.InternalMessageInfo

// Deletes a partition group
type DeletePartitionGroupRequest struct {
	ID *PartitionGroupId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DeletePartitionGroupRequest) Reset()         { *m = DeletePartitionGroupRequest{} }
func (m *DeletePartitionGroupRequest) String() string { return proto.CompactTextString(m) }
func (*DeletePartitionGroupRequest) ProtoMessage()    {}
func (*DeletePartitionGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6541e67aaed2c172, []int{4}
}
func (m *DeletePartitionGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeletePartitionGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeletePartitionGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeletePartitionGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePartitionGroupRequest.Merge(m, src)
}
func (m *DeletePartitionGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeletePartitionGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePartitionGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePartitionGroupRequest proto.InternalMessageInfo

func (m *DeletePartitionGroupRequest) GetID() *PartitionGroupId {
	if m != nil {
		return m.ID
	}
	return nil
}

// Returns the result of deleting a partition group
type DeletePartitionGroupResponse struct {
}

func (m *DeletePartitionGroupResponse) Reset()         { *m = DeletePartitionGroupResponse{} }
func (m *DeletePartitionGroupResponse) String() string { return proto.CompactTextString(m) }
func (*DeletePartitionGroupResponse) ProtoMessage()    {}
func (*DeletePartitionGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6541e67aaed2c172, []int{5}
}
func (m *DeletePartitionGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeletePartitionGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeletePartitionGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeletePartitionGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePartitionGroupResponse.Merge(m, src)
}
func (m *DeletePartitionGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeletePartitionGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePartitionGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePartitionGroupResponse proto.InternalMessageInfo

// Enters a primary election
type PartitionElectionRequest struct {
	PartitionID *PartitionId `protobuf:"bytes,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	Member      string       `protobuf:"bytes,2,opt,name=member,proto3" json:"member,omitempty"`
}

func (m *PartitionElectionRequest) Reset()         { *m = PartitionElectionRequest{} }
func (m *PartitionElectionRequest) String() string { return proto.CompactTextString(m) }
func (*PartitionElectionRequest) ProtoMessage()    {}
func (*PartitionElectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6541e67aaed2c172, []int{6}
}
func (m *PartitionElectionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionElectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartitionElectionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartitionElectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionElectionRequest.Merge(m, src)
}
func (m *PartitionElectionRequest) XXX_Size() int {
	return m.Size()
}
func (m *PartitionElectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionElectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionElectionRequest proto.InternalMessageInfo

func (m *PartitionElectionRequest) GetPartitionID() *PartitionId {
	if m != nil {
		return m.PartitionID
	}
	return nil
}

func (m *PartitionElectionRequest) GetMember() string {
	if m != nil {
		return m.Member
	}
	return ""
}

// Enter response
type PartitionElectionResponse struct {
	Term *PrimaryTerm `protobuf:"bytes,1,opt,name=term,proto3" json:"term,omitempty"`
}

func (m *PartitionElectionResponse) Reset()         { *m = PartitionElectionResponse{} }
func (m *PartitionElectionResponse) String() string { return proto.CompactTextString(m) }
func (*PartitionElectionResponse) ProtoMessage()    {}
func (*PartitionElectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6541e67aaed2c172, []int{7}
}
func (m *PartitionElectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartitionElectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartitionElectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartitionElectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionElectionResponse.Merge(m, src)
}
func (m *PartitionElectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *PartitionElectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionElectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionElectionResponse proto.InternalMessageInfo

func (m *PartitionElectionResponse) GetTerm() *PrimaryTerm {
	if m != nil {
		return m.Term
	}
	return nil
}

// Primary term
type PrimaryTerm struct {
	Term       int64    `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	Primary    string   `protobuf:"bytes,2,opt,name=primary,proto3" json:"primary,omitempty"`
	Candidates []string `protobuf:"bytes,3,rep,name=candidates,proto3" json:"candidates,omitempty"`
}

func (m *PrimaryTerm) Reset()         { *m = PrimaryTerm{} }
func (m *PrimaryTerm) String() string { return proto.CompactTextString(m) }
func (*PrimaryTerm) ProtoMessage()    {}
func (*PrimaryTerm) Descriptor() ([]byte, []int) {
	return fileDescriptor_6541e67aaed2c172, []int{8}
}
func (m *PrimaryTerm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrimaryTerm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrimaryTerm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrimaryTerm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimaryTerm.Merge(m, src)
}
func (m *PrimaryTerm) XXX_Size() int {
	return m.Size()
}
func (m *PrimaryTerm) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimaryTerm.DiscardUnknown(m)
}

var xxx_messageInfo_PrimaryTerm proto.InternalMessageInfo

func (m *PrimaryTerm) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *PrimaryTerm) GetPrimary() string {
	if m != nil {
		return m.Primary
	}
	return ""
}

func (m *PrimaryTerm) GetCandidates() []string {
	if m != nil {
		return m.Candidates
	}
	return nil
}

func init() {
	proto.RegisterType((*GetPartitionGroupsRequest)(nil), "atomix.controller.GetPartitionGroupsRequest")
	proto.RegisterType((*GetPartitionGroupsResponse)(nil), "atomix.controller.GetPartitionGroupsResponse")
	proto.RegisterType((*CreatePartitionGroupRequest)(nil), "atomix.controller.CreatePartitionGroupRequest")
	proto.RegisterType((*CreatePartitionGroupResponse)(nil), "atomix.controller.CreatePartitionGroupResponse")
	proto.RegisterType((*DeletePartitionGroupRequest)(nil), "atomix.controller.DeletePartitionGroupRequest")
	proto.RegisterType((*DeletePartitionGroupResponse)(nil), "atomix.controller.DeletePartitionGroupResponse")
	proto.RegisterType((*PartitionElectionRequest)(nil), "atomix.controller.PartitionElectionRequest")
	proto.RegisterType((*PartitionElectionResponse)(nil), "atomix.controller.PartitionElectionResponse")
	proto.RegisterType((*PrimaryTerm)(nil), "atomix.controller.PrimaryTerm")
}

func init() { proto.RegisterFile("atomix/controller/controller.proto", fileDescriptor_6541e67aaed2c172) }

var fileDescriptor_6541e67aaed2c172 = []byte{
	// 493 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcf, 0x6b, 0xd4, 0x40,
	0x14, 0xce, 0x6c, 0xca, 0x4a, 0x5f, 0x14, 0xe9, 0x50, 0x24, 0x4d, 0x65, 0xda, 0x46, 0x84, 0x05,
	0x6b, 0x56, 0xd6, 0x53, 0xf1, 0xb6, 0xdd, 0x52, 0xf6, 0xa4, 0x4c, 0x05, 0x45, 0x0f, 0x92, 0x26,
	0x8f, 0x25, 0xb0, 0xc9, 0xc4, 0xc9, 0x54, 0xec, 0x3f, 0xe0, 0xd9, 0x8b, 0xff, 0x93, 0xc7, 0x1e,
	0x3d, 0x15, 0xc9, 0xde, 0xfd, 0x1b, 0x64, 0xf3, 0x6b, 0xd7, 0xee, 0x98, 0xee, 0x41, 0x4f, 0x99,
	0x79, 0xf3, 0x7d, 0xef, 0xfb, 0x92, 0xf7, 0x65, 0xc0, 0xf5, 0x95, 0x88, 0xa3, 0xcf, 0xfd, 0x40,
	0x24, 0x4a, 0x8a, 0xe9, 0x14, 0xe5, 0xd2, 0xd2, 0x4b, 0xa5, 0x50, 0x82, 0x6e, 0x95, 0x18, 0x6f,
	0x71, 0xe0, 0x1c, 0xac, 0xd2, 0x52, 0x5f, 0xaa, 0x48, 0x45, 0x22, 0x29, 0x59, 0xce, 0xf6, 0x44,
	0x4c, 0x44, 0xb1, 0xec, 0xcf, 0x57, 0x65, 0xd5, 0x7d, 0x0b, 0x3b, 0xa7, 0xa8, 0x5e, 0xd5, 0xd8,
	0x53, 0x29, 0x2e, 0xd2, 0x8c, 0xe3, 0xc7, 0x0b, 0xcc, 0x14, 0x7d, 0x01, 0x9d, 0x28, 0xb4, 0xc9,
	0x3e, 0xe9, 0x59, 0x83, 0x47, 0xde, 0x8a, 0xaa, 0xf7, 0x27, 0x6d, 0x1c, 0x0e, 0xbb, 0xf9, 0xf5,
	0x5e, 0x67, 0x3c, 0xe2, 0x9d, 0x28, 0x74, 0xdf, 0x80, 0xa3, 0xeb, 0x9c, 0xa5, 0x22, 0xc9, 0x90,
	0x1e, 0x41, 0x77, 0x52, 0x54, 0x6c, 0xb2, 0x6f, 0xf6, 0xac, 0xc1, 0xc1, 0xad, 0xed, 0x79, 0x45,
	0x70, 0xbf, 0x11, 0xd8, 0x3d, 0x96, 0xe8, 0x2b, 0xbc, 0x01, 0xf8, 0x07, 0xae, 0xe9, 0x11, 0x6c,
	0x64, 0x29, 0x06, 0x76, 0xa7, 0xa0, 0x3f, 0xbe, 0x95, 0x7e, 0x96, 0x62, 0xc0, 0x0b, 0x8a, 0xcb,
	0xe0, 0xa1, 0xde, 0x56, 0xf9, 0xca, 0xee, 0x3b, 0xd8, 0x1d, 0xe1, 0x14, 0xff, 0x87, 0xed, 0xb9,
	0xb6, 0xbe, 0x77, 0xa5, 0xfd, 0x85, 0x80, 0xdd, 0x1c, 0x9d, 0x4c, 0x31, 0x98, 0x3f, 0x6b, 0x65,
	0x0e, 0x77, 0x9b, 0xb0, 0x7c, 0x68, 0x3c, 0xb0, 0x36, 0x0f, 0xe3, 0x70, 0x78, 0x3f, 0xbf, 0xde,
	0xb3, 0x16, 0x85, 0x11, 0xb7, 0xd2, 0xc5, 0x29, 0x7d, 0x00, 0xdd, 0x18, 0xe3, 0x73, 0x94, 0xc5,
	0x97, 0xdc, 0xe4, 0xd5, 0xce, 0x7d, 0x09, 0x3b, 0x1a, 0x1f, 0x55, 0x28, 0x06, 0xb0, 0xa1, 0x50,
	0xc6, 0x6d, 0x06, 0x64, 0x14, 0xfb, 0xf2, 0xf2, 0x35, 0xca, 0x98, 0x17, 0x58, 0xf7, 0x3d, 0x58,
	0x4b, 0x45, 0x4a, 0x97, 0x5a, 0x98, 0x25, 0x84, 0xda, 0x70, 0x27, 0x2d, 0x21, 0x95, 0x99, 0x7a,
	0x4b, 0x19, 0x40, 0xe0, 0x27, 0x61, 0x14, 0xfa, 0x0a, 0x33, 0xdb, 0xdc, 0x37, 0x7b, 0x9b, 0x7c,
	0xa9, 0x32, 0xf8, 0x65, 0xc2, 0xd6, 0x71, 0xa3, 0x7e, 0x86, 0xf2, 0x53, 0x14, 0x20, 0xbd, 0x84,
	0x6d, 0xdd, 0xa0, 0xa9, 0xa7, 0x31, 0xdc, 0x12, 0x54, 0xa7, 0xbf, 0x36, 0xbe, 0x9a, 0xa2, 0x31,
	0x97, 0xd6, 0xcd, 0x59, 0x2b, 0xdd, 0x12, 0x36, 0xad, 0x74, 0x6b, 0x80, 0x0c, 0x9a, 0x01, 0x5d,
	0xfd, 0x9f, 0xe9, 0xa1, 0xa6, 0xd1, 0x5f, 0x2f, 0x14, 0xe7, 0xe9, 0x9a, 0xe8, 0x46, 0x34, 0x81,
	0x7b, 0x27, 0x89, 0x42, 0x59, 0x47, 0x85, 0x3e, 0x69, 0x4b, 0xe5, 0x8d, 0x60, 0x3b, 0x87, 0xeb,
	0x81, 0x6b, 0xb5, 0x67, 0x64, 0x68, 0x7f, 0xcf, 0x19, 0xb9, 0xca, 0x19, 0xf9, 0x99, 0x33, 0xf2,
	0x75, 0xc6, 0x8c, 0xab, 0x19, 0x33, 0x7e, 0xcc, 0x98, 0x71, 0xde, 0x2d, 0xee, 0xcb, 0xe7, 0xbf,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x4d, 0xd9, 0x47, 0x5c, 0xa1, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ControllerServiceClient is the client API for ControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControllerServiceClient interface {
	// Creates a partition group
	CreatePartitionGroup(ctx context.Context, in *CreatePartitionGroupRequest, opts ...grpc.CallOption) (*CreatePartitionGroupResponse, error)
	// Deletes a partition group
	DeletePartitionGroup(ctx context.Context, in *DeletePartitionGroupRequest, opts ...grpc.CallOption) (*DeletePartitionGroupResponse, error)
	// Gets a list of active partition groups
	GetPartitionGroups(ctx context.Context, in *GetPartitionGroupsRequest, opts ...grpc.CallOption) (*GetPartitionGroupsResponse, error)
	// Enters a primary election for a specific partition
	EnterElection(ctx context.Context, in *PartitionElectionRequest, opts ...grpc.CallOption) (ControllerService_EnterElectionClient, error)
}

type controllerServiceClient struct {
	cc *grpc.ClientConn
}

func NewControllerServiceClient(cc *grpc.ClientConn) ControllerServiceClient {
	return &controllerServiceClient{cc}
}

func (c *controllerServiceClient) CreatePartitionGroup(ctx context.Context, in *CreatePartitionGroupRequest, opts ...grpc.CallOption) (*CreatePartitionGroupResponse, error) {
	out := new(CreatePartitionGroupResponse)
	err := c.cc.Invoke(ctx, "/atomix.controller.ControllerService/CreatePartitionGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) DeletePartitionGroup(ctx context.Context, in *DeletePartitionGroupRequest, opts ...grpc.CallOption) (*DeletePartitionGroupResponse, error) {
	out := new(DeletePartitionGroupResponse)
	err := c.cc.Invoke(ctx, "/atomix.controller.ControllerService/DeletePartitionGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) GetPartitionGroups(ctx context.Context, in *GetPartitionGroupsRequest, opts ...grpc.CallOption) (*GetPartitionGroupsResponse, error) {
	out := new(GetPartitionGroupsResponse)
	err := c.cc.Invoke(ctx, "/atomix.controller.ControllerService/GetPartitionGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerServiceClient) EnterElection(ctx context.Context, in *PartitionElectionRequest, opts ...grpc.CallOption) (ControllerService_EnterElectionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ControllerService_serviceDesc.Streams[0], "/atomix.controller.ControllerService/EnterElection", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerServiceEnterElectionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ControllerService_EnterElectionClient interface {
	Recv() (*PartitionElectionResponse, error)
	grpc.ClientStream
}

type controllerServiceEnterElectionClient struct {
	grpc.ClientStream
}

func (x *controllerServiceEnterElectionClient) Recv() (*PartitionElectionResponse, error) {
	m := new(PartitionElectionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ControllerServiceServer is the server API for ControllerService service.
type ControllerServiceServer interface {
	// Creates a partition group
	CreatePartitionGroup(context.Context, *CreatePartitionGroupRequest) (*CreatePartitionGroupResponse, error)
	// Deletes a partition group
	DeletePartitionGroup(context.Context, *DeletePartitionGroupRequest) (*DeletePartitionGroupResponse, error)
	// Gets a list of active partition groups
	GetPartitionGroups(context.Context, *GetPartitionGroupsRequest) (*GetPartitionGroupsResponse, error)
	// Enters a primary election for a specific partition
	EnterElection(*PartitionElectionRequest, ControllerService_EnterElectionServer) error
}

// UnimplementedControllerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedControllerServiceServer struct {
}

func (*UnimplementedControllerServiceServer) CreatePartitionGroup(ctx context.Context, req *CreatePartitionGroupRequest) (*CreatePartitionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePartitionGroup not implemented")
}
func (*UnimplementedControllerServiceServer) DeletePartitionGroup(ctx context.Context, req *DeletePartitionGroupRequest) (*DeletePartitionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePartitionGroup not implemented")
}
func (*UnimplementedControllerServiceServer) GetPartitionGroups(ctx context.Context, req *GetPartitionGroupsRequest) (*GetPartitionGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartitionGroups not implemented")
}
func (*UnimplementedControllerServiceServer) EnterElection(req *PartitionElectionRequest, srv ControllerService_EnterElectionServer) error {
	return status.Errorf(codes.Unimplemented, "method EnterElection not implemented")
}

func RegisterControllerServiceServer(s *grpc.Server, srv ControllerServiceServer) {
	s.RegisterService(&_ControllerService_serviceDesc, srv)
}

func _ControllerService_CreatePartitionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartitionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).CreatePartitionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.controller.ControllerService/CreatePartitionGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).CreatePartitionGroup(ctx, req.(*CreatePartitionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_DeletePartitionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePartitionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).DeletePartitionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.controller.ControllerService/DeletePartitionGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).DeletePartitionGroup(ctx, req.(*DeletePartitionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_GetPartitionGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartitionGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServiceServer).GetPartitionGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/atomix.controller.ControllerService/GetPartitionGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServiceServer).GetPartitionGroups(ctx, req.(*GetPartitionGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControllerService_EnterElection_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PartitionElectionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServiceServer).EnterElection(m, &controllerServiceEnterElectionServer{stream})
}

type ControllerService_EnterElectionServer interface {
	Send(*PartitionElectionResponse) error
	grpc.ServerStream
}

type controllerServiceEnterElectionServer struct {
	grpc.ServerStream
}

func (x *controllerServiceEnterElectionServer) Send(m *PartitionElectionResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ControllerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "atomix.controller.ControllerService",
	HandlerType: (*ControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePartitionGroup",
			Handler:    _ControllerService_CreatePartitionGroup_Handler,
		},
		{
			MethodName: "DeletePartitionGroup",
			Handler:    _ControllerService_DeletePartitionGroup_Handler,
		},
		{
			MethodName: "GetPartitionGroups",
			Handler:    _ControllerService_GetPartitionGroups_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EnterElection",
			Handler:       _ControllerService_EnterElection_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "atomix/controller/controller.proto",
}

func (m *GetPartitionGroupsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPartitionGroupsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPartitionGroupsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintController(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPartitionGroupsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPartitionGroupsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPartitionGroupsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Groups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintController(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreatePartitionGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePartitionGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePartitionGroupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintController(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintController(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreatePartitionGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePartitionGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePartitionGroupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeletePartitionGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePartitionGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeletePartitionGroupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != nil {
		{
			size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintController(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeletePartitionGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePartitionGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeletePartitionGroupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PartitionElectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionElectionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionElectionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Member) > 0 {
		i -= len(m.Member)
		copy(dAtA[i:], m.Member)
		i = encodeVarintController(dAtA, i, uint64(len(m.Member)))
		i--
		dAtA[i] = 0x12
	}
	if m.PartitionID != nil {
		{
			size, err := m.PartitionID.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintController(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PartitionElectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionElectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartitionElectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Term != nil {
		{
			size, err := m.Term.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintController(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrimaryTerm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimaryTerm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimaryTerm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Candidates) > 0 {
		for iNdEx := len(m.Candidates) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Candidates[iNdEx])
			copy(dAtA[i:], m.Candidates[iNdEx])
			i = encodeVarintController(dAtA, i, uint64(len(m.Candidates[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Primary) > 0 {
		i -= len(m.Primary)
		copy(dAtA[i:], m.Primary)
		i = encodeVarintController(dAtA, i, uint64(len(m.Primary)))
		i--
		dAtA[i] = 0x12
	}
	if m.Term != 0 {
		i = encodeVarintController(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintController(dAtA []byte, offset int, v uint64) int {
	offset -= sovController(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetPartitionGroupsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovController(uint64(l))
	}
	return n
}

func (m *GetPartitionGroupsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovController(uint64(l))
		}
	}
	return n
}

func (m *CreatePartitionGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovController(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovController(uint64(l))
	}
	return n
}

func (m *CreatePartitionGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeletePartitionGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != nil {
		l = m.ID.Size()
		n += 1 + l + sovController(uint64(l))
	}
	return n
}

func (m *DeletePartitionGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PartitionElectionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PartitionID != nil {
		l = m.PartitionID.Size()
		n += 1 + l + sovController(uint64(l))
	}
	l = len(m.Member)
	if l > 0 {
		n += 1 + l + sovController(uint64(l))
	}
	return n
}

func (m *PartitionElectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Term != nil {
		l = m.Term.Size()
		n += 1 + l + sovController(uint64(l))
	}
	return n
}

func (m *PrimaryTerm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Term != 0 {
		n += 1 + sovController(uint64(m.Term))
	}
	l = len(m.Primary)
	if l > 0 {
		n += 1 + l + sovController(uint64(l))
	}
	if len(m.Candidates) > 0 {
		for _, s := range m.Candidates {
			l = len(s)
			n += 1 + l + sovController(uint64(l))
		}
	}
	return n
}

func sovController(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozController(x uint64) (n int) {
	return sovController(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetPartitionGroupsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPartitionGroupsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPartitionGroupsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &PartitionGroupId{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPartitionGroupsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPartitionGroupsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPartitionGroupsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &PartitionGroup{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePartitionGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePartitionGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePartitionGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &PartitionGroupId{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &PartitionGroupSpec{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePartitionGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePartitionGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePartitionGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePartitionGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePartitionGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePartitionGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ID == nil {
				m.ID = &PartitionGroupId{}
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePartitionGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePartitionGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePartitionGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionElectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionElectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionElectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PartitionID == nil {
				m.PartitionID = &PartitionId{}
			}
			if err := m.PartitionID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Member", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Member = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionElectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionElectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionElectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Term == nil {
				m.Term = &PrimaryTerm{}
			}
			if err := m.Term.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrimaryTerm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowController
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrimaryTerm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrimaryTerm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Primary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Primary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Candidates", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowController
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthController
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthController
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Candidates = append(m.Candidates, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipController(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthController
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipController(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowController
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowController
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowController
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthController
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthController
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowController
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipController(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthController
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthController = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowController   = fmt.Errorf("proto: integer overflow")
)
