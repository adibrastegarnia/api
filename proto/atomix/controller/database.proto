syntax = "proto3";

package atomix.controller;

import "google/protobuf/any.proto";
import "gogoproto/gogo.proto";

// Database identifier
message DatabaseId {
    // name is the name of the database
    string name = 1;

    // namespace is the namespace to which the database belongs
    string namespace = 2;
}

// Database configuration
message Database {
    // id is the database identifier
    DatabaseId id = 1 [(gogoproto.customname) = "ID"];

    // partitions is a list of partitions in the cluster
    repeated Partition partitions = 2;
}

// Cluster identifier
message ClusterId {
    // id is the unique numeric identifier for the cluster
    int32 id = 1 [(gogoproto.customname) = "ID"];

    // database_id is the identifier for the database to which the cluster belonds
    DatabaseId database_id = 2 [(gogoproto.customname) = "DatabaseID"];
}

// Cluster configuration
message Cluster {
    // id is the cluster identifier
    ClusterId id = 1 [(gogoproto.customname) = "ID"];

    // partitions is a list of partitions in the cluster
    repeated PartitionId partitions = 2;
}

// Cluster configuration
message ClusterConfig {
    // members is a list of cluster members
    repeated MemberConfig members = 1;

    // partitions is a list of partitions owned by the cluster
    repeated PartitionId partitions = 2;
}

// Member configuration
message MemberConfig {
    // id is the unique member identifier
    string id = 1 [(gogoproto.customname) = "ID"];

    // host is the member host
    string host = 2;

    // api_port is the port to use for the client API
    int32 api_port = 3 [(gogoproto.customname) = "APIPort", (gogoproto.jsontag) = "apiPort"];

    // protocol_port is the port to use for intra-cluster communication
    int32 protocol_port = 4 [(gogoproto.jsontag) = "protocolPort"];
}

// Partition identifier
message PartitionId {
    int32 partition = 1;
    PartitionGroupId group = 2 [deprecated = true];
    ClusterId cluster = 3;
}

// Partition group name
message PartitionGroupId {
    option deprecated = true;
    string name = 1;
    string namespace = 2;
}

// Partition configuration
message PartitionConfig {
    option deprecated = true;
    PartitionId partition = 1;
    NodeConfig controller = 2;
    repeated NodeConfig members = 3;
    repeated PartitionId partitions = 4;
}

// Node configuration
message NodeConfig {
    option deprecated = true;
    string id = 1 [(gogoproto.customname) = "ID"];
    string host = 2;
    int32 port = 3;
    int32 api_port = 4 [(gogoproto.customname) = "APIPort", (gogoproto.jsontag) = "apiPort"];
    int32 protocol_port = 5 [(gogoproto.jsontag) = "protocolPort"];
}

// Partition group info
message PartitionGroup {
    option deprecated = true;
    PartitionGroupId id = 1 [(gogoproto.customname) = "ID"];
    PartitionGroupSpec spec = 2;
    repeated Partition partitions = 3;
}

// Partition info
message Partition {
    int32 partition_id = 1 [(gogoproto.customname) = "PartitionID"];
    repeated PartitionEndpoint endpoints = 2;
}

// Partition endpoint
message PartitionEndpoint {
    string host = 1;
    int32 port = 2;
}

// Partition group specification
message PartitionGroupSpec {
    option deprecated = true;
    uint32 partitions = 1;
    uint32 partition_size = 2;
    google.protobuf.Any protocol = 3;
}
