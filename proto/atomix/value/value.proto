syntax = "proto3";

package atomix.value;

import "google/protobuf/duration.proto";
import "atomix/headers/headers.proto";
import "atomix/primitive/primitive.proto";

option java_package = "io.atomix.api.value";
option java_multiple_files = true;

message CreateRequest {
    atomix.primitive.PrimitiveId value_id = 1;
    google.protobuf.Duration timeout = 2;
}

message CreateResponse {
    atomix.headers.SessionHeader header = 1;
}

message KeepAliveRequest {
    atomix.primitive.PrimitiveId value_id = 1;
    atomix.headers.SessionHeader header = 2;
}

message KeepAliveResponse {
    atomix.headers.SessionHeader header = 1;
}

message CloseRequest {
    atomix.primitive.PrimitiveId value_id = 1;
    atomix.headers.SessionHeader header = 2;
    bool delete = 3;
}

message CloseResponse {

}

message GetRequest {
    atomix.primitive.PrimitiveId value_id = 1;
    atomix.headers.SessionQueryHeader header = 2;
}

message GetResponse {
    atomix.headers.SessionResponseHeader header = 1;
    bytes value = 2;
    int64 version = 3;
}

message SetRequest {
    atomix.primitive.PrimitiveId value_id = 1;
    atomix.headers.SessionCommandHeader header = 2;
    bytes value = 3;
}

message SetResponse {
    atomix.headers.SessionResponseHeader header = 1;
    int64 version = 2;
    bytes previous_value = 3;
    int64 previous_version = 4;
}

message CheckAndSetRequest {
    atomix.primitive.PrimitiveId value_id = 1;
    atomix.headers.SessionCommandHeader header = 2;
    bytes check = 3;
    bytes update = 4;
    int64 version = 5;
}

message CheckAndSetResponse {
    atomix.headers.SessionResponseHeader header = 1;
    int64 version = 2;
    bool succeeded = 3;
}

message EventRequest {
    atomix.primitive.PrimitiveId value_id = 1;
    atomix.headers.SessionCommandHeader header = 2;
}

message EventResponse {
    atomix.headers.SessionResponseHeader header = 1;
    Type type = 2;
    bytes previous_value = 3;
    int64 previous_version = 4;
    bytes new_value = 5;
    int64 new_version = 6;

    enum Type {
        UPDATED = 0;
    }
}

// Value service
service ValueService {

    rpc Create(CreateRequest) returns (CreateResponse) {

    }

    rpc KeepAlive(KeepAliveRequest) returns (KeepAliveResponse) {

    }

    rpc Close(CloseRequest) returns (CloseResponse) {

    }

    rpc Set(SetRequest) returns (SetResponse) {

    }

    rpc Get(GetRequest) returns (GetResponse) {

    }

    rpc CheckAndSet(CheckAndSetRequest) returns (CheckAndSetResponse) {

    }

    rpc Event(EventRequest) returns (stream EventResponse) {

    }

}
